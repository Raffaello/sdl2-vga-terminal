parameters:
  - name: vcpkg_key_cache
    displayName: CACHE_VCPKG_KEY
    type: string
    default: ''
  
  - name: triplet
    displayName: triplet
    type: string
  
  - name: build_type
    displayName: Build Type
    type: string
  ### default to a global var VCPKG_CMAKE
  - name: vcpkg_cmake
    displayName: VCPKG_CMAKE
    type: string
    default: $(VCPKG_CMAKE)
  
  - name: cmake_args
    displayName: CMAKE_ARGS
    type: string
    default: $(CMAKE_ARGS)
  
  - name: cmake_ignore_path
    displayName: CMAKE_IGNORE_PATH
    type: string
    default: ''

  - name: arch
    displayName: arch
    type: string
    default: ''
  
  - name: test
    displayName: Run Test?
    type: boolean
    default: true
 
  - name: install
    displayName: Run install?
    type: boolean
    default: true
 
  - name: package
    displayName: Run pacakge?
    type: boolean
    default: true

steps:
- template: 'vcpkg-cache-step.yml'
  parameters:
    vcpkg_key_cache: ${{ parameters.vcpkg_key_cache }}
    triplet: ${{ parameters.triplet }}

- bash: |
    mkdir build && cd build
    cmake -DCMAKE_BUILD_TYPE=${{ parameters.build_type }}  -DCMAKE_TOOLCHAIN_FILE=${{ parameters.vcpkg_cmake }} ${{ parameters.cmake_args }} ..
  displayName: cmake generator (UNIX)
  condition: ne(variables['Agent.OS'], 'Windows_NT')
- bash: cmake --build .
  displayName: cmake build (UNIX)
  workingDirectory: build
  condition: ne(variables['Agent.OS'], 'Windows_NT')

- script: |
    call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars${{ parameters.arch }}.bat"
    mkdir build && cd build
    cmake -DCMAKE_IGNORE_PATH="${{ parameters.cmake_ignore_path }}" -G"Ninja" -DCMAKE_BUILD_TYPE=${{ parameters.build_type }} -DCMAKE_TOOLCHAIN_FILE=${{ parameters.vcpkg_cmake }} ${{ parameters.cmake_args }} ..
  displayName: 'CMake generator (WIN)'
  condition: eq(variables['Agent.OS'], 'Windows_NT')
- script: |
    call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars${{ parameters.arch }}.bat"
    cmake --build .
  workingDirectory: build
  displayName: cmake build (WIN)
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- ${{ if eq(parameters.test, true) }}:
  - script: ctest -C ${{ parameters.build_type }} -V
    displayName: cmake test (ctest)
    workingDirectory: build

- ${{ if eq(parameters.install, true) }}:
  - script: cmake --build . --target install
    displayName: cmake --target install
    workingDirectory: build

- ${{ if eq(parameters.package, true) }}:
  - script: cmake --build . --target package
    displayName: cmake --target package
    workingDirectory: build
  ## TODO: clean up, now is for pre-testing (enable condition)
  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)/build'
      contents: '*.zip'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
    #condition: contains(variables['Build.SourceBranch'], 'refs/tags/')
  ### This step is optional, not needed for the release  
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: '$(Build.SourceBranchName)'
    #condition: contains(variables['Build.SourceBranch'], 'refs/tags/')
  - task: GitHubRelease@0
    inputs:
      gitHubConnection: 'github connection 1'
      repositoryName: '$(Build.Repository.Name)' 
      action: 'edit' #'create' # Options: create, edit, delete
      target: '$(Build.SourceVersion)' # Required when action == Create || Action == Edit
      tagSource: 'auto' # Required when action == Create# Options: auto, manual
      #tagPattern: # Optional
      #tag: # Required when action == Edit || Action == Delete || TagSource == Manual
      #title: # Optional
      #releaseNotesSource: 'file' # Optional. Options: file, input
      #releaseNotesFile: # Optional
      #releaseNotes: # Optional
      assets: '$(Build.ArtifactStagingDirectory)/*.zip' # Optional
      assetUploadMode: 'replace' #'delete' # Optional. Options: delete, replace
      isDraft: true # Optional
      #isPreRelease: false # Optional
      addChangeLog: true # Optional
      compareWith: 'lastFullRelease' # Required when addChangeLog == True. Options: lastFullRelease, lastRelease, lastReleaseByTag
      #releaseTag: # Required when compareWith == LastReleaseByTag
    #condition: contains(variables['Build.SourceBranch'], 'refs/tags/')
