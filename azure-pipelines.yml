# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  CONFIGURATION: 'Debug'

stages:
- stage: CI
  jobs:
    - job: Linux
      pool:
        vmImage: 'ubuntu-18.04'
      steps:
      - bash: echo ${PWD}
        displayName: "current dir"
      - script: |
          sudo apt-get update
          sudo apt-get -y install ninja-build  libsdl2-dev libsdl2-image-dev
        displayName: install Ninja Build SDL2 
      - script: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh
          ./vcpkg install gtest
          ./vcpkg integrate install
        displayName: vcpkg
      - script: |
          mkdir build
          cd build
          cmake -G "Ninja" -DCMAKE_BUILD_TYPE=${CONFIGURATION} -DCMAKE_TOOLCHAIN_FILE=/home/vsts/work/1/s/vcpkg/scripts/buildsystems/vcpkg.cmake ..
        displayName: cmake generator
      - script: cd build && cmake --build .
        displayName: cmake build
      #- script: cd build && ctest -V
      #  displayName: cmake test (ctest)
      
    - job: Windows
      strategy:
        matrix:
          64-bit Debug:
            ARCH: x64
            BuildType: Debug
            CMakeArgs: '-G"Visual Studio 15 2019 Win64"'
            JFlag: -j 2

          64-bit Release:
            ARCH: x86
            BuildType: Release
            CMakeArgs: '-G"Visual Studio 15 2019 Win64"'
            JFlag: -j 2
      pool:
        vmImage: 'windows-2019'
      steps:
      - script: echo %CD%
        displayName: "check curent dir"
      - script: echo %PATH%
        displayName: show PATH
      #- script: choco list --local-only
      #  displayName: chocolatey installed packages
      #- script: choco uninstall strawberryperl
      #  displayName: Remove GCC (StrawBerry Perl) chocolatey installation
      - script: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars%ARCH%.bat"
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          call bootstrap-vcpkg.bat
          vcpkg install sdl2 sdl2-image gtest --triplet %ARCH%-windows
          vcpkg integrate install
        displayName: vcpkg
      #- script: |
      #    mkdir build && cd build
      #    call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
      #    cmake -G "Ninja" -DCMAKE_BUILD_TYPE=%CONFIGURATION% -DCMAKE_TOOLCHAIN_FILE=D:\a\1\s\vcpkg\scripts\buildsystems\vcpkg.cmake ..
      #  displayName: cmake generate
      - task: CMake@1
        displayName: 'CMake .. $(CMakeArgs) -DCMAKE_BUILD_TYPE=$(BuildType) -DSNMALLOC_CI_BUILD=On -DSNMALLOC_RUST_SUPPORT=On'
        inputs:
          cmakeArgs: '.. $(CMakeArgs) -DCMAKE_BUILD_TYPE=$(BuildType) -DCMAKE_TOOLCHAIN_FILE=D:\a\1\s\vcpkg\scripts\buildsystems\vcpkg.cmake'
      - script: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cmake --build .
        workingDirectory: build
        displayName: cmake build
      - script: 'ctest -V -C $(BuildType)'
        workingDirectory: build
        displayName: 'Run Ctest'
      - script: cmake -P cmake_install.cmake
        workingDirectory: build
        displayName: cmake install
