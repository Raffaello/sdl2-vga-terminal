trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    #- .gitignore
    - .github/*
    - README.md
    - appveyor.yml

pr:
  branches:
    include:
    - master
  paths:
    exclude:
    #- .gitignore
    - .github/*
    - README.md
    - appveyor.yml

variables:
  CACHE_VCPKG_KEY: test6 | vcpkg-root
  VCPKG_CMAKE: $(Build.SourcesDirectory)/vcpkg/scripts/buildsystems/vcpkg.cmake
  #ARCH:
  #TRIPLET:
  #VCVARS:

stages:
- stage: Dep
  jobs:
    - job: vcpkg
      strategy:
        matrix:
          Linux:
            imageName: 'ubuntu-16.04'
            TRIPLET: x64-linux
          MacOS:
            imageName: 'macOS-10.15'
            TRIPLET: x64-osx
          Win 32 bits:
            imageName: 'windows-2019'
            TRIPLET: x86-windows
            ARCH: 32
          Win 64 bits:
            imageName: 'windows-2019'
            TRIPLET: x64-windows
            ARCH: 64
      pool:
        vmImage: $(imageName)
      steps:
      - checkout: none
      - task: Cache@2
        inputs:
          key: '$(CACHE_VCPKG_KEY) | $(TRIPLET)'
          path: "vcpkg"
          cacheHitVar: CACHE_RESTORED
      - bash: test -d vcpkg || git clone https://github.com/Microsoft/vcpkg.git
        displayName: clone vcpkg
      - bash: |
          ./bootstrap-vcpkg.sh 
          ./vcpkg install sdl2 sdl2-image gtest --triplet $TRIPLET
          rm -rf buildtrees/* docs/* downloads/* packages/*
        workingDirectory: vcpkg
        displayName: vcpkg bash
        condition: and(ne(variables['Agent.OS'], 'Windows_NT'), ne(variables.CACHE_RESTORED, 'true'))
      - script: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars%ARCH%.bat"
          call bootstrap-vcpkg.bat 
          vcpkg.exe install sdl2 sdl2-image gtest --triplet %TRIPLET%
          del /Q /S buildtrees docs downloads packages > NUL
        workingDirectory: vcpkg
        displayName: vcpkg win
        condition: and(eq(variables['Agent.OS'], 'Windows_NT'), ne(variables.CACHE_RESTORED, 'true'))

- stage: CI
  jobs:
    - job: Linux
      variables:
        TRIPLET: x64-linux
      strategy:
        matrix:
          GCC Debug:
            CONFIGURATION: Debug
          GCC Release:
            CONFIGURATION: Release
      pool:
        vmImage: 'ubuntu-18.04'
      steps:
      - task: Cache@2
        inputs:
          key: '$(CACHE_VCPKG_KEY) | $(TRIPLET)'
          path: "vcpkg"
        displayName: "(cache) vcpkg"
      - bash: mkdir build && echo "created build dir"
        displayName: mkdir build
      - bash: ./vcpkg integrate install
        workingDirectory: vcpkg
      - bash: |
          cmake -DCMAKE_BUILD_TYPE=${CONFIGURATION} -DWITH_SDL2_STATIC=ON -DBUILD_SNAPSHOT=OFF -DCMAKE_TOOLCHAIN_FILE=$VCPKG_CMAKE ..
        workingDirectory: build
        displayName: cmake generator
      - bash: cmake --build .
        displayName: cmake build
        workingDirectory: build
      #- script: cd build && ctest -V
      #  displayName: cmake test (ctest)
      #- script: cd build && cmake --build . --target install
      #  displayName: cmake --target install
      - script: cmake --build . --target package
        displayName: cmake --target package
        workingDirectory: build

    - job: Windows
      strategy:
        matrix:
          64-bit Debug:
            ARCH: 64
            PLATFORM: x64
            BuildType: Debug
            SDL2_STATIC: OFF
            TRIPLET: x64-windows
          64-bit Release:
            ARCH: 64
            PLATFORM: x64
            BuildType: Release
            SDL2_STATIC: OFF
            TRIPLET: x64-windows
          32-bit Debug:
            ARCH: 32
            PLATFORM: x86
            BuildType: Debug
            SDL2_STATIC: OFF
            TRIPLET: x86-windows
          32-bit Release:
            ARCH: 32
            PLATFORM: x86
            BuildType: Release
            SDL2_STATIC: OFF
            TRIPLET: x86-windows
      pool:
        vmImage: 'windows-2019'
      steps:
      - task: Cache@2
        inputs:
          key: '$(CACHE_VCPKG_KEY) | $(TRIPLET)'
          path: "vcpkg"
        displayName: "(cache) vcpkg"
      - script: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars%ARCH%.bat"
          vcpkg integrate install
          vcpkg list
        workingDirectory: vcpkg
        displayName: vcpkg
      - script: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars%ARCH%.bat"
          mkdir build && cd build
          cmake -DCMAKE_IGNORE_PATH="C:/MinGW/bin;C:/Strawberry/c/bin;C:/Program Files (x86)/LLVM/bin;C:/ProgramData/chocolatey/bin" -G"Ninja" -DCMAKE_BUILD_TYPE=$(BuildType) -DWITH_SDL2_STATIC=$(SDL2_STATIC) -DCMAKE_TOOLCHAIN_FILE=%VCPKG_CMAKE% ..
        displayName: 'CMake generator'
      - script: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars%ARCH%.bat"
          cmake --build .
        workingDirectory: build
        displayName: cmake build
      - script: 'ctest -V -C $(BuildType)'
        workingDirectory: build
        displayName: 'Run Ctest'
      - script: cmake --build . --target install
        workingDirectory: build
        displayName: cmake install
      - script: cmake --build . --target package
        workingDirectory: build
        displayName: cmake package

    - job: macOS
      variables:
        TRIPLET: x64-osx
      strategy:
        matrix:
          Debug:
            CONFIGURATION: Debug
          Release:
            CONFIGURATION: Release
      pool:
        vmImage: 'macOS-10.15'
      steps:
      - task: Cache@2
        inputs:
          key: '$(CACHE_VCPKG_KEY) | $(TRIPLET)'
          path: "vcpkg"
        displayName: "(cache) vcpkg"
      - bash: |
          git clone https://github.com/Microsoft/vcpkg.git
          mkdir build && echo "create build dir"
        displayName: clone vcpkg, mkdir build
      - bash: |
          ./vcpkg integrate install
        workingDirectory: vcpkg
        displayName: vcpkg
      - bash: |
          cmake -DCMAKE_BUILD_TYPE=${CONFIGURATION} -DWITH_SDL2_STATIC=ON -DBUILD_SNAPSHOT=OFF -DCMAKE_TOOLCHAIN_FILE=$VCPKG_CMAKE ..
        workingDirectory: build
        displayName: cmake generator
      - bash: cd build && cmake --build .
        displayName: cmake build
      - bash: cd build && ctest -V
        displayName: cmake test (ctest)
      #- script: cd build && cmake --build . --target install
      #  displayName: cmake --target install
      - script: cd build && cmake --build . --target package
        displayName: cmake --target package

- stage: SonarCloud
  jobs:
    - job: Windows
      strategy:
        matrix:
          64-bit Debug:
            TRIPLET: x64-windows
            ARCH: 64
            BuildType: Debug
            SDL2_STATIC: OFF
            CMAKE_IGNORE_PATH: "C:/MinGW/bin;C:/Strawberry/c/bin;C:/Program Files (x86)/LLVM/bin;C:/ProgramData/chocolatey/bin"
            CMAKE_ARGS:  -DWITH_SDL2_STATIC=$(SDL2_STATIC) -DBUILD_TESTING=ON -DBUILD_SHARED_LIBS=ON -DBUILD_EXAMPLES=ON -DBUILD_SNAPSHOT=ON
            SONAR_CLOUD_WRAPPER_URL: https://sonarcloud.io/static/cpp/build-wrapper-win-x86.zip
      pool:
        vmImage: 'windows-2019'
      steps:
      - task: Cache@2
        inputs:
          key: '$(CACHE_VCPKG_KEY) | $(TRIPLET)'
          path: "vcpkg"
        displayName: "(cache) vcpkg"
      - script: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars%ARCH%.bat"
          mkdir build && cd build
          cmake -DCMAKE_IGNORE_PATH="%CMAKE_IGNORE_PATH%" -G"Ninja" -DCMAKE_BUILD_TYPE=$(BuildType) -DCMAKE_TOOLCHAIN_FILE=D:/a/1/s/vcpkg/scripts/buildsystems/vcpkg.cmake %CMAKE_ARGS% ..
        displayName: 'CMake generator'
      - task: Cache@2
        inputs:
          key: 'build-wrapper | "$(Agent.OS)"'
          path: "build/build-wrapper"
          cacheHitVar: CACHE_RESTORED
        displayName: "(cache) build-wrapper"
      - bash: |
          curl $SONAR_CLOUD_WRAPPER_URL --output build-wrapper.zip
          unzip build-wrapper.zip
        workingDirectory: build
        displayName: build-wrapper
        condition: ne(variables.CACHE_RESTORED, 'true')
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'sonarCloud'
          organization: 'raffaello-github'
          scannerMode: 'CLI'
          configMode: 'file'        
        displayName: Prepare sonarCloud
      - script: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars%ARCH%.bat"
          build-wrapper-win-x86\build-wrapper-win-x86-64.exe --out-dir bw-output cmake --build .
        workingDirectory: build
        displayName: sonarCloud build
      - task: SonarCloudAnalyze@1
      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '600'
